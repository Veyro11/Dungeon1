

구현 목표 목록:

1: 우선 기본 이동/점프 구현
2: 체력바 UI
3: 오브젝트 조사/상호작용 (아이템을 보면 화면에 UI표시: e.g. 빵: 체력을 약간 회복한다. \nE: 습득 )
4: 점프대: 색이 다른 3D박스 또는, 넓직한 반구 하나를 그려 넣는 것으로 타협. 또는 팔각 기둥을 가공하거나.
5: 아이템: 체력 회복용, 스테미너 회복용, 버프용으로 세 가지. 그 이상으로는 부여하지 않음: 예시로는 더블 점프, 무적 등.
6: 장비 장착은 세 가지만. 픽셀 그래픽을 돌리는 방식으로 단 위에 돌려놓자: UI에 E라고 적어두기만.
7: 레이저 트랩은 당연히 채용.
8: 상호작용 가능한 오브젝트 표시는 커서를 가져다대면 "E로 상호작용" 같이 표시.
9: 발사기도 당연 채택.
10: AI는 채택안할거임. 뭘 원하는지도 잘 모르겠어서.
11: 움직이는 발판은 채택. 가장 필요한 기능이라고 일단 생각하는중.


클래스 구조에 대해서도 생각을 해 봐야만 함.

1: 씬은 1개만으로 구성할 예정: '지금은' 구태여 씬을 여러개 써가면서 디자인 할 필요성을 느끼지 못함.
2: 매니저 클래스 적극채용.
- 게임메니저
- 사운드매니저
- 아이템매니저
- 애니메이션매니저
- UI매니저
- 플레이어매니저
- 카메라 매니저
- 오브젝트 매니저
총 7개쯤으로 구성.

3:
구현 기능에 따른 클래스를 나누면:
게임:
일시정지/재시작/설정 등의 UI와 연계될 수 있음.
플레이어 사망시 로직 처리.
기본적인 목표 달성 로직 처리: 게임의 엔딩은...아직 미정이나 꼭대기 도달로.
게임 데이터 로딩(이건 아이템매니저에 넣어야 하는걸까)
사운드:
게임 내내 사운드를 플레이어 옆에서 재생.
플레이어 효과음 재생.
재생 소리 조절.
아이템:
아이템 데이터 로딩
정의된 아이템 사용 로직(효과) 적용.
애니메이션:
현재 플레이어의 상태에 따라 다른 애니메이션 적용
UI:
각종 UI의 표시 여부나 크기 등 조절.
UI와 플레이어 간의 상호작용 로직 적용.
플레이어:
플레이어 움직임.
플레이어 상태 판정
카메라:
1인칭과 3인칭간의 다른 카메라 사용(전환)로직.
캐릭터를 자연스럽게 따라갈 수 있도록 하는 로직 적용.
오브젝트:
적대 오브젝트/친화 오브젝트 구별.
오브젝트와 플레이어 간의 충돌 판정(데미지/회복)
오브젝트와 플레이어 간의 상호작용 판정.